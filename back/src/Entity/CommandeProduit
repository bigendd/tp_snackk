<?php

namespace App\Entity;

use ApiPlatform\Metadata\ApiResource;
use App\Repository\CommandeProduitRepository;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Entity(repositoryClass: CommandeProduitRepository::class)]
#[ApiResource(
    normalizationContext: ['groups' => ['commande_produit:read']],
    denormalizationContext: ['groups' => ['commande_produit:write']]
)]
class CommandeProduit
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(['commande_produit:read', 'commande:read'])]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    #[Assert\NotNull]
    #[Groups(['commande_produit:read', 'commande_produit:write', 'commande:read'])]
    private ?Produit $produit = null;

    #[ORM\ManyToOne(inversedBy: 'commandeProduits')]
    #[ORM\JoinColumn(nullable: false)]
    #[Assert\NotNull]
    #[Groups(['commande_produit:read', 'commande_produit:write', 'commande:read'])]
    private ?Commande $commande = null;

    #[ORM\Column]
    #[Assert\NotNull]
    #[Assert\Positive(message: "La quantité doit être supérieure à 0")]
    #[Groups(['commande_produit:read', 'commande_produit:write', 'commande:read', 'commande:read'])]
    private int $quantite = 1;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getProduit(): ?Produit { return $this->produit; }
    public function setProduit(?Produit $produit): static { $this->produit = $produit; return $this; }


    public function getCommande(): ?Commande { return $this->commande; }
    public function setCommande(?Commande $commande): static { $this->commande = $commande; return $this; }

    public function getQuantite(): ?int { return $this->quantite; }
    public function setQuantite(int $quantite): static { $this->quantite = $quantite; return $this; }
   
}
